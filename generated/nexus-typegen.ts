/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  RatingInput: { // input type
    itemId: string; // String!
    userId: string; // String!
    value: number; // Int!
  }
}

export interface NexusGenEnums {
  UserRole: "ADMIN" | "USER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Item: { // root type
    id: string; // String!
    imagePlaceholder?: string | null; // String
    imageUrl?: string | null; // String
    title?: string | null; // String
  }
  Mutation: {};
  Query: {};
  Rating: { // root type
    itemId: string; // String!
    userId: string; // String!
    value: number; // Int!
  }
  User: { // root type
    email: string; // String!
    id: string; // String!
    name: string; // String!
    role: NexusGenEnums['UserRole']; // UserRole!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Item: { // field return type
    avgRating: number; // Int!
    id: string; // String!
    imagePlaceholder: string | null; // String
    imageUrl: string | null; // String
    title: string | null; // String
  }
  Mutation: { // field return type
    deleteItem: NexusGenRootTypes['Item'] | null; // Item
    publishItem: NexusGenRootTypes['Item'] | null; // Item
    setRatings: Array<NexusGenRootTypes['Rating'] | null> | null; // [Rating]
    uploadItem: NexusGenRootTypes['Item'] | null; // Item
  }
  Query: { // field return type
    getItem: NexusGenRootTypes['Item'] | null; // Item
    getItems: Array<NexusGenRootTypes['Item'] | null> | null; // [Item]
    getMe: NexusGenRootTypes['User'] | null; // User
  }
  Rating: { // field return type
    item: NexusGenRootTypes['Item']; // Item!
    itemId: string; // String!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
    value: number; // Int!
  }
  User: { // field return type
    email: string; // String!
    id: string; // String!
    name: string; // String!
    ratings: Array<NexusGenRootTypes['Rating'] | null>; // [Rating]!
    role: NexusGenEnums['UserRole']; // UserRole!
  }
}

export interface NexusGenFieldTypeNames {
  Item: { // field return type name
    avgRating: 'Int'
    id: 'String'
    imagePlaceholder: 'String'
    imageUrl: 'String'
    title: 'String'
  }
  Mutation: { // field return type name
    deleteItem: 'Item'
    publishItem: 'Item'
    setRatings: 'Rating'
    uploadItem: 'Item'
  }
  Query: { // field return type name
    getItem: 'Item'
    getItems: 'Item'
    getMe: 'User'
  }
  Rating: { // field return type name
    item: 'Item'
    itemId: 'String'
    user: 'User'
    userId: 'String'
    value: 'Int'
  }
  User: { // field return type name
    email: 'String'
    id: 'String'
    name: 'String'
    ratings: 'Rating'
    role: 'UserRole'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    deleteItem: { // args
      id: string; // ID!
    }
    publishItem: { // args
      id: string; // ID!
    }
    setRatings: { // args
      ratings: NexusGenInputs['RatingInput'][]; // [RatingInput!]!
    }
    uploadItem: { // args
      imagePlaceholder: string; // String!
      imageUrl: string; // String!
      title: string; // String!
    }
  }
  Query: {
    getItem: { // args
      id: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}